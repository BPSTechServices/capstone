{
	"info": {
		"_postman_id": "2d39c9a1-4a8e-449f-a798-72421b6bc001",
		"name": "API-Tests",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Too Many Records",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "230cd1ce-70dc-4643-862e-6dd869b44d9a",
						"exec": [
							"pm.test(\"Too Many Records Status Code\", function () {",
							"    pm.response.to.have.status(500);",
							"}",
							")",
							"pm.test(\"Too Many Records Response\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"Failed to decode JSON object\");",
							"}",
							")"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json",
						"disabled": true
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    {\n\t\t\"Submission date\": \"01/01/20\",\n    \t\"Entity\": \"The Greenhouse1\",\n    \t\"DBA\": \"Boss Nass's1\",\n    \t\"Facility Address\": \"197 N Electric Ave\",\n    \t\"Facility Suite #\": \"\",\n    \t\"Facility Zip\": \"97202\",\n    \t\"Mailing Address\": \"101 NE Tabor Dr\",\n    \t\"MRL\": \"MRL48\",\n    \t\"Neighborhood Association\": \"Arbor Lodge\",\n    \t\"Compliance Region\": \"SE\",\n    \t\"Primary Contact First Name\": \"Ashley\",\n    \t\"Primary Contact Last Name\": \"Clark\",\n    \t\"Email\": \"ac@example.com\",\n    \t\"Phone\": \"971-245-0996\",\n    \t\"Endorse Type\": \"EX,CT\",\n    \t\"License Type\": \"MR\",\n    \t\"Repeat location?\": \"N\",\n    \t\"App complete?\": \"Y\",\n    \t\"Fee Schedule\": \"2020\",\n    \t\"Receipt No.\": 67,\n    \t\"Cash Amount\": \"$1500\",\n    \t\"Check Amount\": \"0\",\n    \t\"Card Amount\": \"\",\n    \t\"Check No. / Approval Code\": \"512\",\n    \t\"MRL#\": \"MRL48\",\n    \t\"Notes\": \"\"\n    },\n    {\n    \t\"Submission date\": \"01/01/20\",\n    \t\"Entity\": \"The Greenhouse2\",\n    \t\"DBA\": \"Boss Nass's2\",\n    \t\"Facility Address\": \"198 N Electric Ave\",\n    \t\"Facility Suite #\": \"\",\n    \t\"Facility Zip\": \"97201\",\n    \t\"Mailing Address\": \"102 NE Tabor Dr\",\n    \t\"MRL\": \"MRL49\",\n    \t\"Neighborhood Association\": \"Arbor Lodge\",\n    \t\"Compliance Region\": \"SE\",\n    \t\"Primary Contact First Name\": \"Ashley1\",\n    \t\"Primary Contact Last Name\": \"Clark1\",\n    \t\"Email\": \"ac@example22.com\",\n    \t\"Phone\": \"971-245-0995\",\n    \t\"Endorse Type\": \"EX,CT\",\n    \t\"License Type\": \"MR\",\n    \t\"Repeat location?\": \"N\",\n    \t\"App complete?\": \"Y\",\n    \t\"Fee Schedule\": \"2020\",\n    \t\"Receipt No.\": 67,\n\t    \"Cash Amount\": \"$1500\",\n\t    \"Check Amount\": \"0\",\n\t    \"Card Amount\": \"\",\n\t    \"Check No. / Approval Code\": \"512\",\n    \t\"MRL#\": \"MRL48\",\n\t    \"Notes\": \"\"\n    }\n}\n"
				},
				"url": {
					"raw": "https://localhost/load?table=intake",
					"protocol": "https",
					"host": [
						"localhost"
					],
					"path": [
						"load"
					],
					"query": [
						{
							"key": "table",
							"value": "intake"
						}
					]
				},
				"description": "Update"
			},
			"response": []
		},
		{
			"name": "Incomplete Intake Request",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "fdc9d067-4f7a-4a02-bcde-e6d45c02310d",
						"exec": [
							"pm.test(\"Incomplete Intake Status Code\", function () {",
							"    pm.response.to.have.status(500);",
							"}",
							")",
							"pm.test(\"Incomplete Intake Response\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"Failed to decode JSON object\");",
							"}",
							")"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"Submission date\": \"01/01/18\",\n  \"Entity\": \"The invalid house\",\n  \"DBA\": \"invalid Boss Nass's\",\n  \"Facility Address\": \"197 N invalid Ave\",\n  \"Facility Suite #\": \"\",\n  \"Facility Zip\": \"97207\",\n  \"Mailing Address\": \"100 NE invalid Dr\",\n  \"MRL\": \"MRL48\",\n  \"Neighborhood Association\": \"invalid Lodge\",\n  \"Compliance Region\": \"SE\",\n  \"Primary Contact First Name\": \"Ashley-invalid\",\n  \"Primary Contact Last Name\": \"Clarks\",\n  \"Email\": \"ac@invalid.com\",\n  \"Phone\": \"971-111-0996\",\n  \"Endorse Type\": \"EX,CT\",\n  \"License Type\": \"MR\",\n  \"Repeat location?\": \"N\",\n  \"App complete?\": \"Y\",\n\"\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://localhost/load?table=intake",
					"protocol": "https",
					"host": [
						"localhost"
					],
					"path": [
						"load"
					],
					"query": [
						{
							"key": "table",
							"value": "intake"
						}
					]
				},
				"description": "Invalid Intake, missing data"
			},
			"response": []
		},
		{
			"name": "Empty Intake Request",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "e7a801e8-84d8-40f6-bda2-345f1d3aee23",
						"exec": [
							"pm.test(\"Incomplete Intake Request\", function () {",
							"    pm.response.to.have.status(500);",
							"}",
							")"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://localhost/load?table=intake",
					"protocol": "https",
					"host": [
						"localhost"
					],
					"path": [
						"load"
					],
					"query": [
						{
							"key": "table",
							"value": "intake"
						}
					]
				},
				"description": "Invalid Intake, missing data"
			},
			"response": []
		},
		{
			"name": "Single Intake Request",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "312950a7-45b8-4ce2-8e1b-03f23cd976a0",
						"exec": [
							"pm.test(\"Single Intake Request\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"PUT completed\");",
							"}",
							")"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"value": "application/json",
						"type": "text",
						"disabled": true
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"row\": 222,\n  \"Submission date\": \"01/01/20\",\n  \"Entity\": \"The Greenhouse Gases\",\n  \"DBA\": \"Boss Nass's\",\n  \"Facility Address\": \"197 N Electric Ave\",\n  \"Facility Suite #\": \"\",\n  \"Facility Zip\": \"97204\",\n  \"Mailing Address\": \"100 NE Tabor Dr\",\n  \"MRL\": \"MRL51\",\n  \"Neighborhood Association\": \"Arbor Lodge\",\n  \"Compliance Region\": \"SE\",\n  \"Primary Contact Name (first)\": \"Ashley\",\n  \"Primary Contact Name (last)\": \"Clark\",\n  \"Email\": \"ac@example.com\",\n  \"Phone\": \"971-245-0996\",\n  \"Endorse Type\": \"EX,CT\",\n  \"License Type\": \"MR\",\n  \"Repeat location?\": \"N\",\n  \"App complete?\": \"Y\",\n  \"Fee Schedule\": \"2020\",\n  \"Receipt No.\": 22,\n  \"Cash Amount\": \"$1500\",\n  \"Check Amount\": \"0\",\n  \"Card Amount\": \"\",\n  \"Check No. / Approval Code\": \"512\",\n  \"MRL#\": \"MRL48\",\n  \"Notes\": \"\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://localhost/load?table=intake",
					"protocol": "https",
					"host": [
						"localhost"
					],
					"path": [
						"load"
					],
					"query": [
						{
							"key": "table",
							"value": "intake"
						}
					]
				},
				"description": "Update"
			},
			"response": []
		},
		{
			"name": "Duplicate Intake",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "5bd583b6-55b8-4c78-a22c-c74ada3ed4f9",
						"exec": [
							"pm.test(\"Duplicate Intake Request\", function () {",
							"    pm.expect(pm.response.json()).to.have.property('fail_row');",
							"}",
							");",
							"pm.test(\"Duplicate Intake Status Code\", function () {",
							"    pm.response.to.have.status(400);",
							"}",
							");"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json",
						"disabled": true
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"row\": 222,\n  \"Submission date\": \"01/01/20\",\n  \"Entity\": \"The Greenhouse Gases\",\n  \"DBA\": \"Boss Nass's\",\n  \"Facility Address\": \"197 N Electric Ave\",\n  \"Facility Suite #\": \"\",\n  \"Facility Zip\": \"97204\",\n  \"Mailing Address\": \"100 NE Tabor Dr\",\n  \"MRL\": \"MRL51\",\n  \"Neighborhood Association\": \"Arbor Lodge\",\n  \"Compliance Region\": \"SE\",\n  \"Primary Contact Name (first)\": \"Ashley\",\n  \"Primary Contact Name (last)\": \"Clark\",\n  \"Email\": \"ac@example.com\",\n  \"Phone\": \"971-245-0996\",\n  \"Endorse Type\": \"EX,CT\",\n  \"License Type\": \"MR\",\n  \"Repeat location?\": \"N\",\n  \"App complete?\": \"Y\",\n  \"Fee Schedule\": \"2020\",\n  \"Receipt No.\": 22,\n  \"Cash Amount\": \"$1500\",\n  \"Check Amount\": \"0\",\n  \"Card Amount\": \"\",\n  \"Check No. / Approval Code\": \"512\",\n  \"MRL#\": \"MRL48\",\n  \"Notes\": \"\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://localhost/load?table=intake",
					"protocol": "https",
					"host": [
						"localhost"
					],
					"path": [
						"load"
					],
					"query": [
						{
							"key": "table",
							"value": "intake"
						}
					]
				},
				"description": "Update"
			},
			"response": []
		},
		{
			"name": "Multi Intake",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "95711293-2f23-4089-8190-0a910799820d",
						"exec": [
							"var value = pm.environment.get(\"inc\");",
							"",
							"pm.environment.set(\"inc\", value+1);",
							"",
							"pm.test(\"Multi Intake Request\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"PUT completed\");",
							"}",
							")"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "14ae1a72-4de9-4b24-a7c6-b4d62df45e02",
						"exec": [
							"var inc = pm.environment.get(\"inc\");",
							"",
							"if( !inc) {",
							"    pm.environment.set(\"inc\", 1);",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json",
						"disabled": true
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"row\": {{inc}},\n  \"Submission date\": \"01/01/20\",\n  \"Entity\": \"The Greenhouse Gases{{inc}}\",\n  \"DBA\": \"Boss{{inc}}\",\n  \"Facility Address\": \"{{inc}} N Electric Ave\",\n  \"Facility Suite #\": \"\",\n  \"Facility Zip\": \"97{{inc}}\",\n  \"Mailing Address\": \"{{inc}} NE Tabor Dr\",\n  \"MRL\": \"MRL{{inc}}\",\n  \"Neighborhood Association\": \"Arbor Lodge\",\n  \"Compliance Region\": \"SE\",\n  \"Primary Contact Name (first)\": \"Ashley{{inc}}\",\n  \"Primary Contact Name (last)\": \"Clark{{inc}}\",\n  \"Email\": \"ac@example{{inc}}.com\",\n  \"Phone\": \"971-245-345{{inc}}\",\n  \"Endorse Type\": \"EX,CT\",\n  \"License Type\": \"MR\",\n  \"Repeat location?\": \"N\",\n  \"App complete?\": \"Y\",\n  \"Fee Schedule\": \"2020\",\n  \"Receipt No.\": \"{{inc}}\",\n  \"Cash Amount\": \"$1500\",\n  \"Check Amount\": \"0\",\n  \"Card Amount\": \"\",\n  \"Check No. / Approval Code\": \"{{inc}}\",\n  \"MRL#\": \"MRL{{inc}}\",\n  \"Notes\": \"\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://localhost/load?table=intake",
					"protocol": "https",
					"host": [
						"localhost"
					],
					"path": [
						"load"
					],
					"query": [
						{
							"key": "table",
							"value": "intake"
						}
					]
				},
				"description": "Update"
			},
			"response": []
		},
		{
			"name": "Invalid URL",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "38411125-da55-413c-830c-e2813b099867",
						"exec": [
							"pm.test(\"Invalid URL Status Code\", function () {",
							"    pm.response.to.have.status(404);",
							"}",
							")",
							"pm.test(\"Invalid URL Response\", function () {",
							"     pm.expect(pm.response.text()).to.include(\"The requested endpoint does not exist.\");",
							"}",
							")"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "https://localhost/foo",
					"protocol": "https",
					"host": [
						"localhost"
					],
					"path": [
						"foo"
					]
				},
				"description": "Tests for bad URL"
			},
			"response": []
		},
		{
			"name": "File Intake",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "082658e2-804d-464c-994b-a453402aef80",
						"exec": [
							"// This test requires POSTing the sample.xlsx file found in the source code repository's resources directory.",
							"// The link to this file does not ship across export/import instances, and so will need to be",
							"// set by the test client. In the Body tab, set the file argument to the sample.xlsx file in the repository,",
							"// then uncomment the following tests.",
							"",
							"// pm.test(\"File Intake Status Code\", function () {",
							"//     pm.response.to.have.status(200);",
							"// }",
							"// )",
							"",
							"// pm.test(\"File Intake Response\", function () {",
							"//     pm.expect(pm.response.text()).to.include(\"File processed successfully\");",
							"// }",
							"// )",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json",
						"disabled": true
					}
				],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "file",
							"type": "file",
							"src": "/home/andrew/projects/capstone/kanabi/resources/sample.xlsx"
						}
					],
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://localhost/load",
					"protocol": "https",
					"host": [
						"localhost"
					],
					"path": [
						"load"
					]
				},
				"description": "Update"
			},
			"response": []
		},
		{
			"name": "Invalid URL",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "445ec5ef-b625-4c55-858e-8c66c1763e69",
						"exec": [
							"pm.test(\"Invalid URL Status Code\", function () {",
							"    pm.response.to.have.status(404);",
							"}",
							")",
							"pm.test(\"Invalid URL Response\", function () {",
							"     pm.expect(pm.response.text()).to.include(\"The requested endpoint does not exist.\");",
							"}",
							")"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "https://localhost/foo",
					"protocol": "https",
					"host": [
						"localhost"
					],
					"path": [
						"foo"
					]
				},
				"description": "Tests for bad URL"
			},
			"response": []
		},
		{
			"name": "No Table Listed in File Upload",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "3d6e288c-67a1-4705-9b45-890f8a4a0313",
						"exec": [
							"pm.test(\"No Table In Upload Status Code\", function () {",
							"    pm.response.to.have.status(400);",
							"}",
							")",
							"pm.test(\"No Table In Upload Output\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"Table name not specified\");",
							"}",
							")"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "https://localhost/load",
					"protocol": "https",
					"host": [
						"localhost"
					],
					"path": [
						"load"
					]
				}
			},
			"response": []
		},
		{
			"name": "Test Query Only Table",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "90ece85a-90fd-4b64-9aef-f89250579cdb",
						"exec": [
							"pm.test(\"Test Query Only Table Status\", function () {",
							"    pm.response.to.have.status(200);",
							"}",
							")",
							"",
							"pm.test(\"Test Query Only Table Schema\", function () {",
							"    var json = pm.response.json()[0];",
							"    pm.expect(json).to.have.property('app_complete');",
							"    pm.expect(json).to.have.property('card_amount');",
							"    pm.expect(json).to.have.property('cash_amount');",
							"    pm.expect(json).to.have.property('check_amount');",
							"    pm.expect(json).to.have.property('check_num');",
							"    pm.expect(json).to.have.property('compliance_region');",
							"    pm.expect(json).to.have.property('dba');",
							"    pm.expect(json).to.have.property('email');",
							"    pm.expect(json).to.have.property('endorse_type');",
							"    pm.expect(json).to.have.property('entity');",
							"    pm.expect(json).to.have.property('facility_address');",
							"    pm.expect(json).to.have.property('facility_suite');",
							"    pm.expect(json).to.have.property('facility_zip');",
							"    pm.expect(json).to.have.property('fee_schedule');",
							"    pm.expect(json).to.have.property('license_type');",
							"    pm.expect(json).to.have.property('mailing_address');",
							"    pm.expect(json).to.have.property('mrl');",
							"    pm.expect(json).to.have.property('mrl_num');",
							"    pm.expect(json).to.have.property('neighborhood_association');",
							"    pm.expect(json).to.have.property('notes');",
							"    pm.expect(json).to.have.property('phone');",
							"    pm.expect(json).to.have.property('primary_contact_first_name');",
							"    pm.expect(json).to.have.property('primary_contact_last_name');",
							"    pm.expect(json).to.have.property('receipt_num');",
							"    pm.expect(json).to.have.property('repeat_license');",
							"    pm.expect(json).to.have.property('row');",
							"    pm.expect(json).to.have.property('submission_date');",
							"    pm.expect(json).to.have.property('validation_errors');",
							"}",
							")",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"table\": \"intake\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://localhost/list",
					"protocol": "https",
					"host": [
						"localhost"
					],
					"path": [
						"list"
					]
				},
				"description": "Invalid Intake, missing data"
			},
			"response": []
		},
		{
			"name": "Test Query Table and Columns",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "ee6107e2-6b23-4201-b284-632199330640",
						"exec": [
							"pm.test(\"Test Query Table and Columns Status\", function () {",
							"    pm.response.to.have.status(200);",
							"}",
							")",
							"",
							"pm.test(\"Test Query Table and Columns Schema\", function () {",
							"    var json = pm.response.json()[0];",
							"    pm.expect(json).to.have.property('row');",
							"    pm.expect(json).to.have.property('submission_date');",
							"}",
							")"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"table\": \"intake\",\n  \"columns\": [\n    \"submission_date\",\n    \"row\"\n  ]\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://localhost/list",
					"protocol": "https",
					"host": [
						"localhost"
					],
					"path": [
						"list"
					]
				},
				"description": "Invalid Intake, missing data"
			},
			"response": []
		},
		{
			"name": "Test Query And",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "0c749ed8-4f15-4e15-888d-5fa9d80c9552",
						"exec": [
							"pm.test(\"Test Query And Status\", function () {",
							"    pm.response.to.have.status(200);",
							"}",
							")",
							"",
							"pm.test(\"Test Query And Schema\", function () {",
							"    var json = pm.response.json()[0];",
							"    pm.expect(json).to.have.property('dba');",
							"    pm.expect(json).to.have.property('mrl');",
							"}",
							")"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"table\": \"intake\",\n  \"columns\": [\n    \"dba\",\n    \"mrl\"\n  ],\n  \"where\": {\n    \"and\": [\n      {\n        \"column\": \"mrl\",\n        \"op\": \"=\",\n        \"operand\": \"MRL1\"\n      },\n      {\n        \"column\": \"row\",\n        \"op\": \"<\",\n        \"operand\": 5\n      }\n    ]\n  }\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://localhost/list",
					"protocol": "https",
					"host": [
						"localhost"
					],
					"path": [
						"list"
					]
				},
				"description": "Invalid Intake, missing data"
			},
			"response": []
		},
		{
			"name": "Test Query Equals",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "88b54772-6ee8-4149-bb8e-b5db42e18e0f",
						"exec": [
							"pm.test(\"Test Query Equals Status\", function () {",
							"    pm.response.to.have.status(200);",
							"}",
							")",
							"",
							"pm.test(\"Test Query Equals Schema\", function () {",
							"    var json = pm.response.json()[0];",
							"    pm.expect(json).to.have.property('app_complete');",
							"    pm.expect(json).to.have.property('neighborhood_association');",
							"    pm.expect(json).to.have.property('row');",
							"}",
							")"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"table\": \"intake\",\n  \"columns\": [\n    \"row\",\n    \"app_complete\",\n    \"neighborhood_association\"\n  ],\n  \"where\": {\n    \"column\": \"mrl\",\n    \"op\": \"=\",\n    \"operand\": \"MRL51\"\n  }\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://localhost/list",
					"protocol": "https",
					"host": [
						"localhost"
					],
					"path": [
						"list"
					]
				},
				"description": "Invalid Intake, missing data"
			},
			"response": []
		},
		{
			"name": "Test Query or 1",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "a3b79325-c773-4687-ba09-33ff8af32335",
						"exec": [
							"pm.test(\"Test Query Or Status\", function () {",
							"    pm.response.to.have.status(200);",
							"}",
							")",
							"",
							"pm.test(\"Test Query Or Schema\", function () {",
							"    var json = pm.response.json()[0];",
							"    pm.expect(json).to.have.property('entity');",
							"    pm.expect(json).to.have.property('mrl');",
							"    pm.expect(json).to.have.property('submission_date');",
							"}",
							")"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"table\": \"intake\",\n  \"columns\": [\n    \"entity\",\n    \"mrl\",\n    \"submission_date\"\n  ],\n  \"where\": {\n    \"or\": [\n      {\n        \"column\": \"mrl\",\n        \"op\": \"=\",\n        \"operand\": \"MRL20\"\n      },\n      {\n        \"column\": \"submission_date\",\n        \"op\": \">\",\n        \"operand\": \"1/1/2010\"\n      }\n    ]\n  }\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://localhost/list",
					"protocol": "https",
					"host": [
						"localhost"
					],
					"path": [
						"list"
					]
				},
				"description": "Invalid Intake, missing data"
			},
			"response": []
		},
		{
			"name": "Test Query Fail No Table",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "37c19b57-8e4f-482c-a490-d3e610cfb6de",
						"exec": [
							"pm.test(\"Test Query Fail No Table\", function () {",
							"    pm.response.to.have.status(400);",
							"}",
							")",
							"",
							"pm.test(\"Test Query Fail No Table Response\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"Table name not supplied\");",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"something\": \"x\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://localhost/list",
					"protocol": "https",
					"host": [
						"localhost"
					],
					"path": [
						"list"
					]
				},
				"description": "Invalid Intake, missing data"
			},
			"response": []
		},
		{
			"name": "Test Query Fail Columns Not Array",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "354033b0-a68e-44d1-8e45-4997b1d04180",
						"exec": [
							"pm.test(\"Test Query Fail Columns Not Array\", function () {",
							"    pm.response.to.have.status(400);",
							"}",
							")",
							"",
							"pm.test(\"Test Query Fail Columns Not Array Response\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"Error: Columns must be present as list in request body\");",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"table\": \"intake\",\n  \"columns\": \"dba\"\n} ",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://localhost/list",
					"protocol": "https",
					"host": [
						"localhost"
					],
					"path": [
						"list"
					]
				},
				"description": "Invalid Intake, missing data"
			},
			"response": []
		},
		{
			"name": "Test Query Invalid Column",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "8ab27deb-a519-49a8-8f43-c4106502873d",
						"exec": [
							"pm.test(\"Test Query Invalid Column\", function () {",
							"    pm.response.to.have.status(400);",
							"}",
							")",
							"",
							"pm.test(\"Test Query Fail Invalid Column Response\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"Error: Column x not in known list\");",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"table\": \"intake\",\n  \"columns\": [\n    \"dba\",\n    \"x\"\n  ]\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://localhost/list",
					"protocol": "https",
					"host": [
						"localhost"
					],
					"path": [
						"list"
					]
				},
				"description": "Invalid Intake, missing data"
			},
			"response": []
		},
		{
			"name": "Test Query Fail Invalid and 1",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "78d7e2a7-9e46-4bdc-b8b2-7ba63e07d700",
						"exec": [
							"pm.test(\"Test Query Fail Invalid And 1\", function () {",
							"    pm.response.to.have.status(400);",
							"}",
							")",
							"",
							"pm.test(\"Test Query Fail Invalid And 1 Response\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"Error: Found an AND or OR construct with invalid structure.\");",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"table\": \"intake\",\n  \"columns\": [\n    \"dba\",\n    \"mrl\"\n  ],\n  \"where\": {\n    \"and\": [\n      {\n        \"column\": \"mrl\",\n        \"op\": \"=\",\n        \"operand\": \"MRL20\"\n      }\n    ]\n  }\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://localhost/list",
					"protocol": "https",
					"host": [
						"localhost"
					],
					"path": [
						"list"
					]
				},
				"description": "Invalid Intake, missing data"
			},
			"response": []
		},
		{
			"name": "Test Query Fail Invalid Table",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "4f1f6eae-435a-4a6e-81c6-f1bd59e62e98",
						"exec": [
							"pm.test(\"Test Query Fail Invalid Table\", function () {",
							"    pm.response.to.have.status(400);",
							"}",
							")",
							"",
							"pm.test(\"Test Query Fail Invalid Table Response\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"Error: Requested table not found\");",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"table\": \"x\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://localhost/list",
					"protocol": "https",
					"host": [
						"localhost"
					],
					"path": [
						"list"
					]
				},
				"description": "Invalid Intake, missing data"
			},
			"response": []
		},
		{
			"name": "Test Query Fail Invalid Where",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "040bfdb2-570a-4cad-b61c-3c931fa1c03f",
						"exec": [
							"pm.test(\"Test Query Fail Invalid Where\", function () {",
							"    pm.response.to.have.status(400);",
							"}",
							")",
							"",
							"pm.test(\"Test Query Fail Invalid Where Response\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"Error: No operation requested in block\");",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"table\": \"intake\",\n  \"columns\": [\n    \"dba\",\n    \"mrl\"\n  ],\n  \"where\": {\n    \"x\": 1\n  }\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://localhost/list",
					"protocol": "https",
					"host": [
						"localhost"
					],
					"path": [
						"list"
					]
				},
				"description": "Invalid Intake, missing data"
			},
			"response": []
		},
		{
			"name": "Invalid URL",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "841272b1-644e-452a-af0f-d2cefacc6c37",
						"exec": [
							"pm.test(\"Invalid URL Status Code\", function () {",
							"    pm.response.to.have.status(404);",
							"}",
							")",
							"pm.test(\"Invalid URL Response\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"The requested endpoint does not exist.\");",
							"}",
							")"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://localhost/foo",
					"protocol": "https",
					"host": [
						"localhost"
					],
					"path": [
						"foo"
					]
				},
				"description": "Tests for bad URL"
			},
			"response": []
		},
		{
			"name": "Bad Table",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "12a8cce3-43e2-4116-bc1b-8ea6da3741a4",
						"exec": [
							"pm.test(\"Bad Table Status Code\", function () {",
							"    pm.response.to.have.status(404);",
							"}",
							")",
							"pm.test(\"Bad Table Response\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"Table foo does not exist.\");",
							"}",
							")"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://localhost/list?table=foo",
					"protocol": "https",
					"host": [
						"localhost"
					],
					"path": [
						"list"
					],
					"query": [
						{
							"key": "table",
							"value": "foo"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "List Metadata Table",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "9a5c951a-bff3-4171-b7a9-97b71a742383",
						"exec": [
							"pm.test(\"Get Metadata\", function () {",
							"    pm.response.to.have.status(200);",
							"}",
							")"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://localhost/list?table=metadata",
					"protocol": "https",
					"host": [
						"localhost"
					],
					"path": [
						"list"
					],
					"query": [
						{
							"key": "table",
							"value": "metadata"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "List Intake Table",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "73f21725-ec00-4a32-9f88-c355d094604c",
						"exec": [
							"pm.test(\"Get Intake\", function () {",
							"    pm.response.to.have.status(200);",
							"}",
							")",
							"",
							"pm.test(\"Get Intake Schema\", function () {",
							"    var json = pm.response.json()[0];",
							"    pm.expect(json).to.have.property('entity');",
							"    pm.expect(json).to.have.property('mrl');",
							"    pm.expect(json).to.have.property('submission_date');",
							"}",
							")"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"value": "application/json",
						"type": "text",
						"disabled": true
					}
				],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://localhost/list?table=intake",
					"protocol": "https",
					"host": [
						"localhost"
					],
					"path": [
						"list"
					],
					"query": [
						{
							"key": "table",
							"value": "intake"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Metadata Endpoint",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "37a6bc31-40cd-48b0-babb-1a938c2bfff2",
						"exec": [
							"pm.test(\"Get Metadata Endpont\", function () {",
							"    pm.response.to.have.status(200);",
							"}",
							")"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://localhost/metadata",
					"protocol": "https",
					"host": [
						"localhost"
					],
					"path": [
						"metadata"
					]
				}
			},
			"response": []
		},
		{
			"name": "Base Endpoint",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "85fe1a70-7d08-4e14-8a9a-049f0a38731c",
						"exec": [
							"pm.test(\"Base Endpont\", function () {",
							"    pm.response.to.have.status(200);",
							"}",
							")"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://localhost",
					"protocol": "https",
					"host": [
						"localhost"
					]
				}
			},
			"response": []
		},
		{
			"name": "Signup",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "32324e3c-7338-4d42-bc65-0f6e22242192",
						"exec": [
							"pm.test(\"Signup\", function () {",
							"    pm.response.to.have.status(200);",
							"}",
							")",
							"",
							"pm.test(\"Signup Response Schema\", function () {",
							"    var json = pm.response.json();",
							"    pm.expect(json).to.have.property('user');",
							"    var return_msg = json['return_msg'];",
							"    pm.expect(return_msg).to.eql(\"OK\");",
							"}",
							")"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "urlencoded",
					"urlencoded": [
						{
							"key": "email",
							"value": "joseph@gmail.com",
							"type": "text"
						},
						{
							"key": "name",
							"value": "joseph",
							"type": "text"
						},
						{
							"key": "password",
							"value": "pwd",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "https://localhost:443/signup",
					"protocol": "https",
					"host": [
						"localhost"
					],
					"port": "443",
					"path": [
						"signup"
					]
				}
			},
			"response": []
		},
		{
			"name": "Make admin",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "bacbddc3-3255-4176-9342-e13e807102eb",
						"exec": [
							"pm.test(\"Make Initial Admin\", function () {",
							"    pm.response.to.have.status(200);",
							"}",
							")",
							"",
							"pm.test(\"Make Initial Admin Schema\", function () {",
							"    var json = pm.response.json();",
							"    pm.expect(json).to.have.property('user');",
							"    var return_msg = json['return_msg'];",
							"    // pm.expect(false);",
							"    console.log(return_msg);",
							"    pm.expect(return_msg).to.eql(\"OK\");",
							"}",
							")"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "urlencoded",
					"urlencoded": [
						{
							"key": "email",
							"value": "a@gmail.com",
							"type": "text"
						},
						{
							"key": "password",
							"value": "xef",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "https://localhost:443/makeadmin",
					"protocol": "https",
					"host": [
						"localhost"
					],
					"port": "443",
					"path": [
						"makeadmin"
					]
				}
			},
			"response": []
		}
	],
	"protocolProfileBehavior": {}
}